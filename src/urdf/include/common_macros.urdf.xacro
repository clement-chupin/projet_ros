<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


<xacro:macro name="set_environment" params="package_name:='circuit' ">
  <xacro:property name="package_name" value="${package_name}" scope="global"/>  
</xacro:macro>

<!-- ===================== Wheel xacro =========================================

  Xacro to create a wheel link and the respective joint. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Wheel-xacro

  params:
  - prefix [string]: used to diferentiate the link and joint name;
  - reflect [1/-1]: value to set the side of the wheel;
  - wheel_props [dictionary]: wheel properties;
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the wheel mesh;
    - DEFAULT Value -> Empty string  
-->

               
               
               
               
               
               
  <xacro:macro name="wheel"
               params="prefix reflect wheel_props base_props mesh:='' ">

  <xacro:property name="pos_x_joint"
     value="${(base_props['base']['x_size']/2) - wheel_props['wheel']['x_offset']}"/>
  <xacro:property name="pos_y_joint"
    value="${(base_props['base']['y_size']/2) + wheel_props['wheel']['y_offset'] + (wheel_props['wheel']['length']/2)}"/>
  <xacro:property name="pos_z_joint" value="${wheel_props['wheel']['z_offset']}"/>

    <link name="${prefix}_wheel">
    <xacro:if value="${mesh != '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
         <geometry>
        <mesh filename="package://${package_name}/meshes/${robot_name}/${mesh}" />
        </geometry>
      </visual>
    </xacro:if>
    <xacro:if value="${mesh == '' }" >
      <visual>
        <origin xyz="0.0 0 0" rpy="${pi/2} 0 0"/>
         <geometry>
         <cylinder radius="${wheel_props['wheel']['radius']}" length="${wheel_props['wheel']['length']}"/>
        </geometry>
        <material name="red"/>
      </visual>  
    </xacro:if>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
        <geometry>
          <cylinder radius="${wheel_props['wheel']['radius']}" length="${wheel_props['wheel']['length']}"/>
        </geometry>
      </collision>
      <xacro:cylinder_inertia m="${wheel_props['wheel']['mass']}" 
                              r="${wheel_props['wheel']['radius']}" 
                              l="${wheel_props['wheel']['length']}">
      </xacro:cylinder_inertia> 
    </link>

    <joint name="${prefix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_wheel"/>
      <origin xyz="${pos_x_joint} ${reflect* pos_y_joint} ${pos_z_joint}" rpy="0 0 0"/>
    </joint>

    <transmission name="${prefix}_wheel_transmission">
      <type>transmission_interface/SimpleTransmission</type>
      <joint name="${prefix}_wheel_joint">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      </joint>
      <actuator name="${prefix}_motor">
        <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
    </transmission>
    
  </xacro:macro>


   <xacro:macro name="camera"
               params="cam_height cam_rot_y">
  <link name="camera_link">
    <collision>
      <origin xyz="0 0 ${cam_height}" rpy="0 ${cam_rot_y} 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>

    <visual>
      <origin xyz="0 0 ${cam_height}" rpy="0 ${cam_rot_y} 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
      <material name="Red">
         <color rgba="1.0 0.0 0.0 1.0"/>
        </material>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 ${cam_height}" rpy="0 ${cam_rot_y} 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
    
  
  </link>
    <joint name="my_joint" type="fixed">
    <origin xyz="0 0 ${cam_height}" rpy="0 ${cam_rot_y} 0"/>

   <parent link="base_link"/>
   <child link="camera_link"/>
   
   </joint>
   <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>rrbot/camera1</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>

</xacro:macro>


<xacro:macro name="sensor"
               params="prefix robot_index sensor_x sensor_y sensor_rotate">
 <link name="${prefix}_sensor_link">

    <!--<collision>
      <origin xyz="0 0 0.2" rpy="0 0 ${sensor_rotate}"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>-->

    <visual>
    <origin xyz="0 0 0" rpy="0 0 0"/>

      <geometry>
    <box size="0.05 0.05 0.05"/>
      </geometry>
       <material name="Cyan">
         <color rgba="0 1.0 1.0 1.0"/>
        </material>
    </visual>

    <inertial>
      <mass value="1e-5" />
      <origin xyz="${sensor_x} ${sensor_y} 0.1" rpy="0 0 0"/>

      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
    
  
  </link>
    <joint name="${prefix}_sensor_joint" type="fixed">
    <origin xyz="${sensor_x} ${sensor_y} 0.1" rpy="0 0 ${sensor_rotate}"/>


   <parent link="base_link"/>
   <child link="${prefix}_sensor_link"/>
   
   </joint>


<gazebo reference="${prefix}_sensor_link">        
   <sensor type="ray" name="TeraRanger">
      <pose>${sensor_x} ${sensor_y} 0 0 0 ${sensor_rotate}</pose>
      <visualize>true</visualize>
      <update_rate>50</update_rate>
      <ray>
         <scan>
            <horizontal>
               <samples>10</samples>
               <resolution>1</resolution> 
               <min_angle>-0.14835</min_angle>
               <max_angle>0.14835</max_angle>
            </horizontal>
            <vertical>
               <samples>10</samples>
               <resolution>1</resolution> 
               <min_angle>-0.14835</min_angle>
               <max_angle>0.14835</max_angle> 
            </vertical>
         </scan>
         <range>
            <min>0.01</min>
            <max>2</max>
            <resolution>0.02</resolution>
         </range>
      </ray>
      <plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
         <gaussianNoise>0.005</gaussianNoise>
         <alwaysOn>true</alwaysOn>
         <updateRate>50</updateRate>
         <topicName>sensor_${robot_index}/${prefix}_ir_front</topicName>
         <frameName>base_ir_front</frameName>
         <radiation>INFRARED</radiation>
         <fov>0.2967</fov>
      </plugin>
   </sensor>  
   </gazebo>


</xacro:macro>
<!-- ======================================================================= -->

<!-- Caster wheel link & joint macro -->
  <!-- locationprefix locationright wheel_base_dx TODO remove -->
  <xacro:macro name="caster_wheel" 
                params="prefix reflect wheel_props locationright:=${0} ">
    <!-- caster base (fixed) -->
    <link name="${prefix}_caster_base_link">
      <inertial>
        <origin xyz="0 0 ${-wheel_props['base']['size']['z']/2.0}" rpy="0 0 0" />
        <mass value="${wheel_props['base']['mass']}" />
        <xacro:box_inertia  m="${wheel_props['base']['mass']}" 
                            x="${wheel_props['base']['size']['x']}" 
                            y="${wheel_props['base']['size']['y']}" 
                            z="${wheel_props['base']['size']['z']}" />
      </inertial>
      <xacro:if value="${wheel_props['base']['mass'] != '' }" >
        <visual>
            <origin xyz="0 0 ${-wheel_props['base']['size']['z']/2.0}" rpy="0 0 0" />
            <geometry>
                <mesh filename="package://${package_name}/meshes/${robot_name}/${wheel_props['base']['mesh']}" />
            </geometry>
            <!-- xacro:insert_block name="material_silver" / TODO use this block? -->
            <material name="silver"/>
        </visual>
      </xacro:if>
      <xacro:if value="${wheel_props['base']['mass'] == '' }" >
        <visual>
          <origin xyz="0 0 ${-wheel_props['base']['size']['z']/2.0}" rpy="0 0 0" />
          <geometry>
            <box size="${wheel_props['base']['size']['x']} ${wheel_props['base']['size']['y']} ${wheel_props['base']['size']['z']}" />
          </geometry>
          <material name="red"/>
        </visual>
      </xacro:if>
      <collision>
        <origin xyz="0 0 ${-wheel_props['base']['size']['z']/2.0}" rpy="0 0 0" />
        <geometry>
          <box size="${wheel_props['base']['size']['x']} ${wheel_props['base']['size']['y']} ${wheel_props['base']['size']['z']}" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_caster_base_joint" type="fixed">
      <origin xyz="${wheel_props['base']['dx']} ${-wheel_props['base']['dy'] * locationright} ${wheel_props['base']['dz']}" 
              rpy="0 0 0" />
      <parent link="base_link" />
      <child link="${prefix}_caster_base_link" />
      <axis xyz="0 0 1" />
      <dynamics damping="0.01" friction="0.0"/>
    </joint>
    <gazebo reference="${prefix}_caster_base_link">
      <material>Gazebo/Grey</material>
    </gazebo>


    <!-- caster hub -->
    <link name="${prefix}_caster_rotation_link">
      <inertial>
        <origin xyz="0 0 ${-wheel_props['hub']['size']['z']/2.0}" rpy="0 0 0" />
        <mass value="${wheel_props['hub']['mass']}" />
        <xacro:box_inertia  m="${wheel_props['hub']['mass']}" 
                            x="${wheel_props['hub']['size']['x']}" 
                            y="${wheel_props['hub']['size']['y']}" 
                            z="${wheel_props['hub']['size']['z']}" />
      </inertial>
      <xacro:if value="${wheel_props['hub']['mesh'] != '' }" >
        <visual>
          <origin xyz="0 0 ${-wheel_props['hub']['size']['z']/2.0}" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://${package_name}/meshes/${robot_name}/${wheel_props['hub']['mesh']}" />
          </geometry>
          <!-- xacro:insert_block name="material_silver" / TODO use this block? -->
          <material name="silver"/>
        </visual>
      </xacro:if>
      <xacro:if value="${wheel_props['hub']['mesh'] == '' }" >
        <visual>
          <origin xyz="0 0 ${-wheel_props['hub']['size']['z']/2.0}" rpy="0 0 0" />
          <geometry>
            <box size="${wheel_props['hub']['size']['x']} ${wheel_props['hub']['size']['y']} ${wheel_props['hub']['size']['z']}" />
          </geometry>
          <material name="red"/>
        </visual>
      </xacro:if>
      <collision>
        <origin xyz="0 0 ${-wheel_props['hub']['size']['z']/2.0}" rpy="0 0 0" />
        <geometry>
          <box size="${wheel_props['hub']['size']['x']} ${wheel_props['hub']['size']['y']} ${wheel_props['hub']['size']['z']}" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_caster_rotation_joint" type="continuous">
      <origin xyz="${wheel_props['hub']['dx']} ${-wheel_props['hub']['dy'] * locationright} ${wheel_props['hub']['dz']}" 
              rpy="0 0 0" />
      <parent link="base_link" />
      <child link="${prefix}_caster_rotation_link" />
      <axis xyz="0 0 1" />
      <dynamics damping="0.01" friction="0.0"/>
    </joint>
    <gazebo reference="${prefix}_caster_rotation_link">
      <material>Gazebo/Grey</material>
    </gazebo>


    <!-- caster wheel -->
    <link name="${prefix}_caster_wheel_link">
      <xacro:cylinder_inertia m="${wheel_props['wheel']['mass']}" 
                            r="${wheel_props['wheel']['radius']}" 
                            l="${wheel_props['wheel']['length']}">
        <!-- TODO unused block error?: origin xyz="0 0 0" rpy="${pi/2} 0 0" /-->
      </xacro:cylinder_inertia>
      <xacro:if value="${wheel_props['wheel']['mesh'] != '' }" >
        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <mesh filename="package://${package_name}/meshes/${robot_name}/${wheel_props['wheel']['mesh']}" />
          </geometry>
          <!-- TODO use this?: xacro:insert_block name="material_dark_grey" /-->
          <material name="material_dark_grey"/>
        </visual>
      </xacro:if>
      <xacro:if value="${wheel_props['wheel']['mesh'] == '' }" >
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
          <geometry>
            <cylinder length="${wheel_props['wheel']['length']}" radius="${wheel_props['wheel']['radius']}" />
          </geometry>
          <material name="red"/>
        </visual>
      </xacro:if>
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder length="${wheel_props['wheel']['length']}" radius="${wheel_props['wheel']['radius']}" />
        </geometry>
      </collision>
    </link>
    <joint name="${prefix}_caster_wheel_joint" type="continuous">
      <origin xyz="${wheel_props['wheel']['dx']} ${-wheel_props['wheel']['dy'] * locationright} ${wheel_props['wheel']['dz']}" 
              rpy="0 0 0" />
      <parent link="${prefix}_caster_rotation_link" />
      <child link="${prefix}_caster_wheel_link" />
      <axis xyz="0 1 0" />
    </joint>
    <gazebo reference="${prefix}_caster_wheel_link">
      <material>Gazebo/DarkGrey</material>
    </gazebo>
  </xacro:macro>

<!-- ===================== Base xacro ==========================================

  Xacro to create the base link. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Base-xacro

  params:
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the link mesh;
    - DEFAULT Value -> Empty string  
  - origin [block]: origin, position and orientation of the link;
-->
  <xacro:macro name="base"
               params="base_prop mesh:='' *origin ">
    <link name="base_link">
    <xacro:box_inertia m="${base_prop['base']['mass']}" 
                       x="${base_prop['base']['x_size']}" 
                       y="${base_prop['base']['y_size']}"
                       z="${base_prop['base']['z_size']}"> 
    </xacro:box_inertia>
      <visual>
        <origin xyz="0 0 0.1" rpy="0 0 1.57"/>
        <geometry>
          <mesh filename="package://circuit/src/urdf/car_blender.dae" scale="0.2 0.2 0.2"/>
        </geometry>
        <material name="white" />
      </visual>
    <collision>
      <origin xyz="0 0 0.09" rpy="0 0 0"/>
      <geometry>
        <box size="${base_prop['base']['x_size']} ${base_prop['base']['y_size']} ${base_prop['base']['z_size']}"/>
      </geometry>
    </collision>
    </link>
  </xacro:macro> 
<!-- ======================================================================= -->

<!-- ===================== Footprint xacro ==========================================

  Xacro to create the footprint link and creat a fixed joint with the base link.

  params:
  - wheel_props [dictionary]: wheel link properties;
-->
  <xacro:macro name="footprint"
               params="wheel_props">
    <!-- Base-Footprint -->
    <!-- base_footprint is a fictitious link(frame) that is on the ground right below base_link origin -->
    <link name="base_footprint" />

    <!-- Joint to connect base_footprint with base_link -->
    <joint name="base_footprint_joint" type="fixed">
      <parent link="base_footprint"/>
      <child link="base_link" />
      <origin xyz="0 0 ${wheel_props['wheel']['radius'] - wheel_props['wheel']['z_offset']}" rpy="0 0 0" />
    </joint>
  </xacro:macro>
<!-- ======================================================================= -->

<!-- ======================= Intertial macros ===============================-->
<!-- ===================== Cylinder intertia xacro =============================

  Xacro with the intertial block of a cylinder. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro

  params:
  - m [float]: link mass;
  - r [float]: cylinder radius;
  - l [float]: cylinder lenght (height);
-->
  <xacro:macro name="cylinder_inertia" params="m r l">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+l*l)/12}" ixy = "0" ixz = "0" 
               iyy="${m*(3*r*r+l*l)/12}" iyz = "0" izz="${m*r*r/2}"/> 
    </inertial>
  </xacro:macro>

<!-- ===================== Box intertia xacro ==================================

  Xacro with the intertial block of a box. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro

  params:
  - m [float]: link mass;
  - x [float]: link dimension on the X-axis;
  - y [float]: link dimension on the Y-axis;
  - z [float]: link dimension on the Z-axis;
-->
 <xacro:macro name="box_inertia" params="m x y z">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (y*y + z*z)}" ixy="0.0" ixz="0.0"
               iyy="${m / 12.0 * (x*x + z*z)}" iyz="0.0" 
               izz="${m / 12.0 * (x*x + y*y)}"/>
    </inertial>
  </xacro:macro>






<!-- 





===================== Sphere intertia xacro ===============================

  Xacro with the intertial block of a sphere. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro

  params:
  - m [float]: link mass;
  - r [float]: sphere radius;
-->
  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

<!-- ===================== Default intertial xacro =============================

  Xacro with a identity intertial block. For more detail information and usage, see:
    https://github.com/pxalcantara/mobile_robot_description/wiki/Inertia-xacro

  params:
  - m [float]: link mass;
-->
  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </xacro:macro>
<!-- ========================================================================-->

<!-- ===================== Material ============================================

  RVIZ material RGBA definition.
-->

  <material name="blue">
    <color rgba="0 0 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.4 0.8 1.0"/>
  </material>
  <material name="silver">
    <color rgba="0.79 0.82 0.93 1"/>
  </material>
  <material name="material_dark_grey">
    <color rgba="0.3 0.3 0.3 1"/>
  </material>
<!-- ========================================================================-->




  
</robot>
